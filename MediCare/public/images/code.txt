 -- User side view appointment List --
 public function appointment()
    {
        $user = Auth::user();
        $infos = Doctor::all();
        $appointments = Appointment::where('account_id', $user->id)->orderBy('appointment_date', 'desc')->paginate(5);
        $notificationsAlert = Notification::where('account_id', $user->id)->where('is_read',0)->get();

        return view('user.appointment.appointment', compact('appointments', 'infos', 'timeList','notificationsAlert'));
    }
 -- User side create Appointment --
   public function createAppointment(Request $request)
    {
        $timeList = [
            '8:30 AM',
            '9:00 AM',
            '9:30 AM',
            '10:30 AM',
            '11:00 AM',
            '11:30 AM',
            '1:30 PM',
            '2:00 PM',
            '2:30 PM',
            '3:00 PM',
            '3:30 PM',
            '4:00 PM',
        ];

        $request->validate([
            'first_name' => 'required|string|max:255',
            'middle_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'street' => 'required|string|max:255',
            'brgy' => 'required|string|max:255',
            'city' => 'required|string|max:255',
            'province' => 'required|string|max:255',
            'birthdate' => 'required|date',
            'gender' => 'required|string|max:255',
            'specialties' => 'required|string|max:255',
            'phone' => 'required',
            'appointment_type' => 'required|string|max:255',
            'appointment_date' => 'required|date',
            'appointment_time' => 'required|string|max:255',
            'reason' => 'required|string|max:255',
            'check' => 'accepted',
        ]);

        $existingAppointments = Appointment::where('specialties', $request->input('specialties'))
            ->where('appointment_date', $request->input('appointment_date'))
            ->where('appointment_time', $request->input('appointment_time'))
            ->whereNotIn('status', ['unavailable','cancelled'])
            ->get();

        if ($existingAppointments->count() > 0) {

            $appoint_time = $existingAppointments->pluck('appointment_time');

            foreach ($appoint_time as $time) {
                $timeList = array_filter($timeList, function ($value) use ($time) {
                    return $value !== $time;
                });
            }

            $time = implode(', ', $timeList);
            $rawDate = $request->input('appointment_date');
            $dateTime = new DateTime($rawDate);
            $readableDate = $dateTime->format('F j, Y');

            return back()->with([
                'data' => $timeList,
                'info' => 'The current time is unavailable. Please select a date from ' . $readableDate . ' and choose from the available times: ' . $time . '.',
            ]);
        }

        $user = Auth::user();

        Appointment::create([
            'first_name' => $request->input('first_name'),
            'middle_name' => $request->input('middle_name'),
            'last_name' => $request->input('last_name'),
            'account_id' => $user->id,
            'street' => $request->input('street'),
            'gender' => $request->input('gender'),
            'brgy' => $request->input('brgy'),
            'city' => $request->input('city'),
            'province' => $request->input('province'),
            'specialties' => $request->input('specialties'),
            'birthdate' => $request->input('birthdate'),
            'email' => $request->input('email'),
            'phone' => $request->input('phone'),
            'appointment_type' => $request->input('appointment_type'),
            'appointment_date' => $request->input('appointment_date'),
            'appointment_time' => $request->input('appointment_time'),
            'reason' => $request->input('reason'),
            'status' => 'pending',
        ]);

        $appointment = Appointment::latest()->first();
        $currentTime = Carbon::now()->toTimeString();
        $currentDate = Carbon::now()->toDateString();
        $rawDate = $request->input('appointment_date');
        $dateTime = new DateTime($rawDate);
        $readableDate = $dateTime->format('F j, Y');

        $message = 'You successfully created new appointment with ' . $appointment->appointment_type . ' scheduled for ' . $readableDate . ' at ' . $appointment->appointment_time . '.';

        Notification::create([
            'account_id' => $appointment->account_id,
            'title' => 'Appointment Created',
            'message' => $message,
            'date' => $currentDate,
            'time' => $currentTime,
            'type' => 'user',
            'specialties' => $request->input('specialties'),
        ]);

        $message = 'You have a new appointment from ' . ucwords($user->first_name). ' '. ucwords($user->last_name) . ' with ' . $appointment->appointment_type . ' scheduled for ' . $readableDate . ' at ' . $appointment->appointment_time . '.';

        Notification::create([
            'title' => 'New Appointment',
            'message' => $message,
            'date' => $currentDate,
            'time' => $currentTime,
            'type' => 'doctor',
            'specialties' => $request->input('specialties'),
        ]);

        return back()->with('success', 'Appointment created successfully for ' . $readableDate . ' at ' . $request->input('appointment_time'));
    }

-- User side update appointment -- 
   public function updateAppointment(Request $request)
    {

        $request->validate([
            'first_name' => 'required|string|max:255',
            'middle_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'street' => 'required|string|max:255',
            'brgy' => 'required|string|max:255',
            'city' => 'required|string|max:255',
            'province' => 'required|string|max:255',
            'birthdate' => 'required|date',
            'gender' => 'required|string|max:255',
            'email' => 'required|string|email|max:255',
            'phone' => 'required',
            'specialties' => 'required|string|max:255',
            'appointment_type' => 'required|string|max:255',
            'appointment_date' => 'required|date',
            'appointment_time' => 'required|string|max:255',
            'reason' => 'required|string|max:255',
        ]);

        $appointment = Appointment::where('id', $request->appointment_id)->first();

        $appointmentUpdatedData = [
            'first_name' => $request->input('first_name'),
            'middle_name' => $request->input('middle_name'),
            'last_name' => $request->input('last_name'),
            'street' => $request->input('street'),
            'brgy' => $request->input('brgy'),
            'city' => $request->input('city'),
            'province' => $request->input('province'),
            'birthdate' => $request->input('birthdate'),
            'gender' => $request->input('gender'),
            'phone' => $request->input('phone'),
            'specialties' => $request->input('specialties'),
            'email' => $request->input('email'),
            'appointment_type' => $request->input('appointment_type'),
            'appointment_date' => $request->input('appointment_date'),
            'appointment_time' => $request->input('appointment_time'),
            'reason' => $request->input('reason'),
        ];

        $appointmentChange = $this->hasChanges($appointment, $appointmentUpdatedData);

        if ($appointmentChange) {

            if ($appointment->appointment_date != $request->input('appointment_date') || $appointment->appointment_time != $request->input('appointment_time')) {

                $appointment->first_name = $request->input('first_name');
                $appointment->middle_name = $request->input('middle_name');
                $appointment->last_name = $request->input('last_name');
                $appointment->street = $request->input('street');
                $appointment->brgy = $request->input('brgy');
                $appointment->city = $request->input('city');
                $appointment->province = $request->input('province');
                $appointment->birthdate = $request->input('birthdate');
                $appointment->gender = $request->input('gender');
                $appointment->phone = $request->input('phone');
                $appointment->email = $request->input('email');
                $appointment->appointment_type = $request->input('appointment_type');
                $appointment->appointment_date = $request->input('appointment_date');
                $appointment->appointment_time = $request->input('appointment_time');
                $appointment->reason = $request->input('reason');

                $appointment->save();

                return redirect()->back()->with('success', 'Profile updated successfully.');
            } else {
                return back()->with('info', 'The current date and time are unavailable, please select another date and time.');
            }
        } else {
            return redirect()->back()->with('info', 'No changes were made.');
        }
    }
-- User side cancel appointment --
    public function cancelAppointment(Request $request)
    {

        $appointment = Appointment::findOrFail($request->input('appointment_id'));
        $user = User::where('id', $appointment->account_id)->first();

        $appointment->status = 'cancelled';
        $appointment->save();

        $currentTime = Carbon::now()->toTimeString();
        $currentDate = Carbon::now()->toDateString();
        $rawDate = $request->input('appointment_date');
        $dateTime = new DateTime($rawDate);
        $readableDate = $dateTime->format('F j, Y');

        $message = 'You have successfully canceled your appointment for ' . $appointment->appointment_type . ' scheduled on ' . $readableDate . ' at ' . $appointment->appointment_time . '.';


        Notification::create([
            'account_id' => $appointment->account_id,
            'title' => 'Appointment Cancelled',
            'message' => $message,
            'date' => $currentDate,
            'time' => $currentTime,
            'type' => 'user',
            'specialties' => $request->input('specialties'),
        ]);

        $message = ucwords($user->first_name) . ' ' . ucwords($user->last_name) . ' has canceled their appointment for ' . $appointment->appointment_type . ' scheduled on ' . $readableDate . ' at ' . $appointment->appointment_time . '.';

        Notification::create([
            'account_id' => $appointment->account_id,
            'title' => 'Appointment Cancelled',
            'message' => $message,
            'date' => $currentDate,
            'time' => $currentTime,
            'type' => 'doctor',
            'specialties' => $request->input('specialties'),
        ]);

        return redirect()->route('user.appointment')->with('info', 'Appoinment cancelled successfully.');
    }

-- Admin side view patient list -- 
   public function patientList()
    {
        $profile = auth()->user();
        $notifications = Notification::where('type', $profile->role)->orderBy('date', 'desc')->get();
        $limitNotifications = $notifications->take(5);
        $count = $notifications->count();
        $doctors = User::where('role', 'doctor')->get();
        $patients = Patient::orderBy('created_at', 'desc')
            ->get();
        $currentDate = date('Y-m-d');
        $currentDateTime = Carbon::now();
        $currentDateTime->setTimezone('Asia/Manila');
        $currentTime = $currentDateTime->format('h:i A');

        return view('admin.patient.patient', compact('patients', 'profile', 'doctors', 'limitNotifications', 'count', 'currentTime', 'currentDate'));
    }
    
-- Admin side create patient data -- 
   public function patientStore(Request $request)
    {
        $type = $request->input('patient_type');

        $request->validate([
            'first_name' => 'required|string|max:255',
            'middle_name' => 'required|string|max:255',
            'physician' => 'required|string|max:255',
        ]);

        if ($type == 'admitted_patient') {

            $request->validate([
                'admitted_date' => 'required|date',
                'admitted_time' => 'required|time',
            ]);

        } elseif ($type == 'outpatient') {
            $request->validate([
                'date' => 'required',
                'time' => 'required',
            ]);
        }

        $patientData = $request->only([
            'first_name' => 'first_name',
            'middle_name' => 'middle_name',
            'last_name' => 'last_name',
            'street' => 'street',
            'gender' => 'gender',
            'brgy' => 'brgy',
            'city' => 'city',
            'province' => 'province',
            'birthdate' => 'birthdate',
            'phone' => 'phone',
            'type' => 'type',
            'admitted_date' => 'admitted_date',
            'admitted_time' => 'admitted_time',
            'discharged_date' => 'discharged_date',
            'discharged_time' => 'discharged_time',
            'room_number' => 'room_number',
            'bed_number' => 'bed_number',
            'date' => 'date',
            'time' => 'time',
            'physician' => 'physician',
            'medical_condition' => 'medical_condition',
            'guardian_first_name' => 'guardian_first_name',
            'guardian_last_name' => 'guardian_last_name',
            'guardian_birthdate' => 'guardian_birthdate',
            'relationship' => 'relationship',
            'guardian_phone' => 'guardian_phone',
            'guardian_email' => 'guardian_email',
        ]);

        $patient = Patient::create($patientData);

        // Retrieve the ID of the last inserted patient
        $patientId = $patient->id;
        $patientType = $request->input('type');

        $diagnosisDates = $request->input('diagnosesDate', []); // Retrieve an array of diagnosis dates
        $diagnosisTimes = $request->input('diagnosesTime', []); // Retrieve an array of diagnosis dates
        $diagnoses = $request->input('diagnoses', []); // Retrieve an array of diagnoses

        // Iterate through the diagnosis data and save them
        foreach ($diagnosisDates as $key => $diagnosisDate) {
            $diagnosis = new Diagnose();
            $diagnosis->patient_id = $patientId; // Assuming you have the patient object
            $diagnosis->patient_type = $patientType; // Assuming you have the patient object

            // Assign diagnosis data from the arrays
            $diagnosis->date = $diagnosisDate;
            $diagnosis->time = $diagnosisTimes[$key];
            $diagnosis->diagnose = $diagnoses[$key];

            // Save the diagnosis record
            $diagnosis->save();
        }

        $medicationNames = $request->input('medicationName', []); // Retrieve an array of medication names
        $medicationDates = $request->input('medicationDate', []); // Retrieve an array of medication dates
        $dosages = $request->input('medicationDosage', []); // Retrieve an array of dosages
        $durations = $request->input('medicationDuration', []); // Retrieve an array of durations
        $medicationTimes = $request->input('medicationTime', []); // Retrieve an array of medication times

        // Iterate through the medication data and save them
        foreach ($medicationNames as $key => $medicationName) {
            $medication = new Medication();
            $medication->patient_id = $patientId; // Assuming you have the patient object
            $medication->patient_type = $patientType; // Assuming you have the patient object

            // Assign medication data from the arrays
            $medication->medication_name = $medicationName;
            $medication->date = $medicationDates[$key];
            $medication->dosage = $dosages[$key];
            $medication->duration = $durations[$key];
            $medication->time = $medicationTimes[$key];

            // Save the medication record
            $medication->save();
        }



        return back()->with('success', 'Patient added successfully.');
    }

-- Admin side update patient data -- 
    public function patientUpdate(Request $request)
    {
        $patient = Patient::where('id', $request->id)->first();

        switch ($patient) {
            case $patient->type == 'outpatient':

                $request->validate([
                    'first_name' => 'required|string|max:255',
                    'last_name' => 'required|string|max:255',
                    'physician' => 'required|string|max:255',
                ]);

                $patientUpdatedData = [
                    'first_name' => $request->input('first_name'),
                    'middle_name' => $request->input('middle_name'),
                    'last_name' => $request->input('last_name'),
                    'street' => $request->input('street'),
                    'brgy' => $request->input('brgy'),
                    'city' => $request->input('city'),
                    'province' => $request->input('province'),
                    'birthdate' => $request->input('birthdate'),
                    'gender' => $request->input('gender'),
                    'phone' => $request->input('phone'),
                    'date' => $request->input('date'),
                    'time' => $request->input('time'),
                    'physician' => $request->input('physician'),
                    'medical_condition' => $request->input('medical_condition'),
                    'guardian_first_name' => $request->input('guardian_first_name'),
                    'guardian_last_name' => $request->input('guardian_last_name'),
                    'guardian_birthdate' => $request->input('guardian_birthdate'),
                    'relationship' => $request->input('relationship'),
                    'guardian_phone' => $request->input('guardian_phone'),
                    'guardian_email' => $request->input('guardian_email'),

                ];

                // Retrieve the request data
                $diagnosisDates = $request->input('diagnosesDate');
                $diagnosisTimes = $request->input('diagnosesTime');
                $diagnoses = $request->input('diagnoses');

                // Retrieve the existing data from the database
                $existingDiagnoses = Diagnose::where('patient_id', $request->id)->get();

                // Initialize a boolean variable to track changes
                $diagnoseChangesDetected = false;

                foreach ($diagnoses as $index => $newDiagnosis) {
                    $existingDiagnosis = $existingDiagnoses->get($index);
                    $newDiagnoseDate = $diagnosisDates[$index];
                    $newDiagnoseTime = $diagnosisTimes[$index];

                    // Check if an existing record exists for this index
                    if ($existingDiagnosis) {
                        // Compare both the new diagnosis and new diagnoseDate with the existing ones
                        if ($this->hasChanges($existingDiagnosis, ['diagnose' => $newDiagnosis, 'date' => $newDiagnoseDate, 'time' => $newDiagnoseTime])) {
                            // At least one of the fields has been updated
                            $diagnoseChangesDetected = true;
                            // You can log or perform other actions here

                            // Update the existing record with the new data
                            $existingDiagnosis->diagnose = $newDiagnosis;
                            $existingDiagnosis->date = $newDiagnoseDate;
                            $existingDiagnosis->time = $newDiagnoseTime;
                            $existingDiagnosis->save(); // Save the changes to the database
                        }
                    } else {
                        // No existing record for this index, this may mean a new diagnosis was added
                        // Handle new diagnoses here if needed
                        $newDiagnosisRecord = new Diagnose(); // Assuming Diagnosis is your Eloquent model or equivalent
                        $newDiagnosisRecord->patient_id = $patient->id; // Assuming Diagnosis is your Eloquent model or equivalent
                        $newDiagnosisRecord->diagnose = $newDiagnosis;
                        $newDiagnosisRecord->date = $newDiagnoseDate;
                        $newDiagnosisRecord->time = $newDiagnoseTime;
                        $newDiagnosisRecord->save(); // Save the new dia
                        $diagnoseChangesDetected = true;
                    }
                }

                // Retrieve the request data
                $medicationNames = $request->input('medicationName');
                $medicationDates = $request->input('medicationDate');
                $dosages = $request->input('medicationDosage');
                $durations = $request->input('medicationDuration');
                $medicationTimes = $request->input('medicationTime');

                // Retrieve the existing medication data from the database
                $existingMedications = Medication::where('patient_id', $request->id)->get();

                // Initialize a boolean variable to track changes
                $medicationChangesDetected = false;

                foreach ($medicationNames as $index => $newMedicationName) {
                    $existingMedication = $existingMedications->get($index);
                    $newMedicationDate = $medicationDates[$index];
                    $newDosage = $dosages[$index];
                    $newDuration = $durations[$index];
                    $newMedicationTime = $medicationTimes[$index];

                    // Check if an existing record exists for this index
                    if ($existingMedication) {
                        // Compare both the new medication data with the existing ones
                        if (
                            $this->hasChanges($existingMedication, [
                                'medication_name' => $newMedicationName,
                                'date' => $newMedicationDate,
                                'dosage' => $newDosage,
                                'duration' => $newDuration,
                                'time' => $newMedicationTime,
                            ])
                        ) {
                            // At least one of the fields has been updated
                            $medicationChangesDetected = true;
                            // You can log or perform other actions here

                            // Update the existing record with the new data
                            $existingMedication->medication_name = $newMedicationName;
                            $existingMedication->date = $newMedicationDate;
                            $existingMedication->dosage = $newDosage;
                            $existingMedication->duration = $newDuration;
                            $existingMedication->time = $newMedicationTime;
                            $existingMedication->save(); // Save the changes to the database
                        }
                    } else {
                        // No existing record for this index, this may mean a new medication was added
                        $newMedicationRecord = new Medication(); // Assuming Medication is your Eloquent model or equivalent
                        $newMedicationRecord->patient_id = $patient->id; // Assuming Medication is your Eloquent model or equivalent
                        $newMedicationRecord->medication_name = $newMedicationName;
                        $newMedicationRecord->date = $newMedicationDate;
                        $newMedicationRecord->dosage = $newDosage;
                        $newMedicationRecord->duration = $newDuration;
                        $newMedicationRecord->time = $newMedicationTime;
                        $newMedicationRecord->save(); // Save the new medication
                        $medicationChangesDetected = true;
                    }
                }

                $patientChange = $this->hasChanges($patient, $patientUpdatedData);

                if ($patientChange || $diagnoseChangesDetected || $medicationChangesDetected) {
                    $patient->first_name = $request->input('first_name');
                    $patient->middle_name = $request->input('middle_name');
                    $patient->last_name = $request->input('last_name');
                    $patient->street = $request->input('street');
                    $patient->brgy = $request->input('brgy');
                    $patient->city = $request->input('city');
                    $patient->province = $request->input('province');
                    $patient->birthdate = $request->input('birthdate');
                    $patient->gender = $request->input('gender');
                    $patient->phone = $request->input('phone');
                    $patient->date = $request->input('date');
                    $patient->time = $request->input('time');
                    $patient->physician = $request->input('physician');
                    $patient->medical_condition = $request->input('medical_condition');
                    $patient->guardian_first_name = $request->input('guardian_first_name');
                    $patient->guardian_last_name = $request->input('guardian_last_name');
                    $patient->guardian_birthdate = $request->input('guardian_birthdate');
                    $patient->relationship = $request->input('relationship');
                    $patient->guardian_phone = $request->input('guardian_phone');
                    $patient->guardian_email = $request->input('guardian_email');

                    $patient->save();

                    return redirect()->back()->with('success', 'Patient Information Updated Successfully.');
                } else {
                    return redirect()->back()->with('info', 'No changes were made.');
                }

            case $patient->type == 'admitted_patient':

                $request->validate([
                    'first_name' => 'required|string|max:255',
                    'last_name' => 'required|string|max:255',
                    'admitted_date' => 'required|date',
                    'physician' => 'required|string|max:255',
                ]);

                $patientUpdatedData = [
                    'first_name' => $request->input('first_name'),
                    'middle_name' => $request->input('middle_name'),
                    'last_name' => $request->input('last_name'),
                    'street' => $request->input('street'),
                    'brgy' => $request->input('brgy'),
                    'city' => $request->input('city'),
                    'province' => $request->input('province'),
                    'birthdate' => $request->input('birthdate'),
                    'gender' => $request->input('gender'),
                    'phone' => $request->input('phone'),
                    'admitted_date' => $request->input('admitted_date'),
                    'admitted_time' => $request->input('admitted_time'),
                    'discharged_date' => $request->input('discharged_date'),
                    'discharged_time' => $request->input('discharged_time'),
                    'room_number' => $request->input('room_number'),
                    'bed_number' => $request->input('bed_number'),
                    'physician' => $request->input('physician'),
                    'medical_condition' => $request->input('medical_condition'),
                    'guardian_first_name' => $request->input('guardian_first_name'),
                    'guardian_last_name' => $request->input('guardian_last_name'),
                    'guardian_birthdate' => $request->input('guardian_birthdate'),
                    'relationship' => $request->input('relationship'),
                    'guardian_phone' => $request->input('guardian_phone'),
                    'guardian_email' => $request->input('guardian_email'),

                ];

                // Retrieve the request data
                $diagnosisDates = $request->input('diagnosesDate');
                $diagnosisTimes = $request->input('diagnosesTime');
                $diagnoses = $request->input('diagnoses');

                // Retrieve the existing data from the database
                $existingDiagnoses = Diagnose::where('patient_id', $request->id)->get();

                // Initialize a boolean variable to track changes
                $diagnoseChangesDetected = false;

                foreach ($diagnoses as $index => $newDiagnosis) {
                    $existingDiagnosis = $existingDiagnoses->get($index);
                    $newDiagnoseDate = $diagnosisDates[$index];
                    $newDiagnoseTime = $diagnosisTimes[$index];

                    // Check if an existing record exists for this index
                    if ($existingDiagnosis) {
                        // Compare both the new diagnosis and new diagnoseDate with the existing ones
                        if ($this->hasChanges($existingDiagnosis, ['diagnose' => $newDiagnosis, 'date' => $newDiagnoseDate, 'time' => $newDiagnoseTime])) {
                            // At least one of the fields has been updated
                            $diagnoseChangesDetected = true;
                            // You can log or perform other actions here

                            // Update the existing record with the new data
                            $existingDiagnosis->diagnose = $newDiagnosis;
                            $existingDiagnosis->date = $newDiagnoseDate;
                            $existingDiagnosis->time = $newDiagnoseTime;
                            $existingDiagnosis->save(); // Save the changes to the database
                        }
                    } else {
                        // No existing record for this index, this may mean a new diagnosis was added
                        // Handle new diagnoses here if needed
                        $newDiagnosisRecord = new Diagnose(); // Assuming Diagnosis is your Eloquent model or equivalent
                        $newDiagnosisRecord->patient_id = $patient->id; // Assuming Diagnosis is your Eloquent model or equivalent
                        $newDiagnosisRecord->diagnose = $newDiagnosis;
                        $newDiagnosisRecord->date = $newDiagnoseDate;
                        $newDiagnosisRecord->time = $newDiagnoseTime;
                        $newDiagnosisRecord->save(); // Save the new dia
                        $diagnoseChangesDetected = true;
                    }
                }

                // Retrieve the request data
                $medicationNames = $request->input('medicationName');
                $medicationDates = $request->input('medicationDate');
                $dosages = $request->input('medicationDosage');
                $durations = $request->input('medicationDuration');
                $medicationTimes = $request->input('medicationTime');

                // Retrieve the existing medication data from the database
                $existingMedications = Medication::where('patient_id', $request->id)->get();

                // Initialize a boolean variable to track changes
                $medicationChangesDetected = false;

                foreach ($medicationNames as $index => $newMedicationName) {
                    $existingMedication = $existingMedications->get($index);
                    $newMedicationDate = $medicationDates[$index];
                    $newDosage = $dosages[$index];
                    $newDuration = $durations[$index];
                    $newMedicationTime = $medicationTimes[$index];

                    // Check if an existing record exists for this index
                    if ($existingMedication) {
                        // Compare both the new medication data with the existing ones
                        if (
                            $this->hasChanges($existingMedication, [
                                'medication_name' => $newMedicationName,
                                'date' => $newMedicationDate,
                                'dosage' => $newDosage,
                                'duration' => $newDuration,
                                'time' => $newMedicationTime,
                            ])
                        ) {
                            // At least one of the fields has been updated
                            $medicationChangesDetected = true;
                            // You can log or perform other actions here

                            // Update the existing record with the new data
                            $existingMedication->medication_name = $newMedicationName;
                            $existingMedication->date = $newMedicationDate;
                            $existingMedication->dosage = $newDosage;
                            $existingMedication->duration = $newDuration;
                            $existingMedication->time = $newMedicationTime;
                            $existingMedication->save(); // Save the changes to the database
                        }
                    } else {
                        // No existing record for this index, this may mean a new medication was added
                        $newMedicationRecord = new Medication(); // Assuming Medication is your Eloquent model or equivalent
                        $newMedicationRecord->patient_id = $patient->id; // Assuming Medication is your Eloquent model or equivalent
                        $newMedicationRecord->medication_name = $newMedicationName;
                        $newMedicationRecord->date = $newMedicationDate;
                        $newMedicationRecord->dosage = $newDosage;
                        $newMedicationRecord->duration = $newDuration;
                        $newMedicationRecord->time = $newMedicationTime;
                        $newMedicationRecord->save(); // Save the new medication
                        $medicationChangesDetected = true;
                    }
                }

                $patientChange = $this->hasChanges($patient, $patientUpdatedData);

                if ($patientChange || $diagnoseChangesDetected || $medicationChangesDetected) {

                    $patient->first_name = $request->input('first_name');
                    $patient->middle_name = $request->input('middle_name');
                    $patient->last_name = $request->input('last_name');
                    $patient->street = $request->input('street');
                    $patient->brgy = $request->input('brgy');
                    $patient->city = $request->input('city');
                    $patient->province = $request->input('province');
                    $patient->birthdate = $request->input('birthdate');
                    $patient->gender = $request->input('gender');
                    $patient->phone = $request->input('phone');
                    $patient->admitted_date = $request->input('admitted_date');
                    $patient->admitted_time = $request->input('admitted_time');
                    $patient->discharged_date = $request->input('discharged_date');
                    $patient->discharged_time = $request->input('discharged_time');
                    $patient->room_number = $request->input('room_number');
                    $patient->bed_number = $request->input('bed_number');
                    $patient->physician = $request->input('physician');
                    $patient->medical_condition = $request->input('medical_condition');
                    $patient->guardian_first_name = $request->input('guardian_first_name');
                    $patient->guardian_last_name = $request->input('guardian_last_name');
                    $patient->guardian_birthdate = $request->input('guardian_birthdate');
                    $patient->relationship = $request->input('relationship');
                    $patient->guardian_phone = $request->input('guardian_phone');
                    $patient->guardian_email = $request->input('guardian_email');

                    $patient->save();

                    return redirect()->back()->with('success', 'Patient Information Updated Successfully.');
                } else {
                    return redirect()->back()->with('info', 'No changes were made.');
                }
        }
    }

-- Admin side view patient report -- 
    public function viewPatientReport(Request $request)
    {
        $profile = auth()->user();
        $patient = Patient::where('id', $request->input('patient_id'))->first();
        $currentYear = Carbon::now()->year; // Get current year
        $currentDate = date('Y-m-d');
        $currentDateTime = Carbon::now();
        $currentDateWithoutHyphens = str_replace('-', '', $currentDate);
        $currentDateTime->setTimezone('Asia/Manila');
        $currentTime = $currentDateTime->format('h:i A');
        $doctor = User::where('id', $patient->physician)->first();
        $diagnoses = Diagnose::where('patient_id', $patient->id)->get();
        $medications = Medication::where('patient_id', $patient->id)->get();
        $randomNumber = mt_rand(100, 999);
        $reference = 'PIR-' . $currentDateWithoutHyphens . '-' . $randomNumber;

        $data = [
            'patient' => $patient,
            'currentTime' => $currentTime,
            'currentDate' => $currentDate,
            'profile' => $profile,
            'doctor' => $doctor,
            'diagnoses' => $diagnoses,
            'medications' => $medications,
            'reference' => $reference,
        ];

        $pdf = app('dompdf.wrapper')->loadView('admin.report.patient_report', $data);

        return $pdf->stream('patient_report.pdf');
    }

-- Admin side download patient report -- 
    public function downloadPatientReport(Request $request)
    {
        $profile = auth()->user();
        $patient = Patient::where('id', $request->input('patient_id'))->first();
        $currentYear = Carbon::now()->year; // Get current year
        $currentDate = date('Y-m-d');
        $currentDateTime = Carbon::now();
        $currentDateWithoutHyphens = str_replace('-', '', $currentDate);
        $currentDateTime->setTimezone('Asia/Manila');
        $currentTime = $currentDateTime->format('h:i A');
        $doctor = User::where('id', $patient->physician)->first();
        $diagnoses = Diagnose::where('patient_id', $patient->id)->get();
        $medications = Medication::where('patient_id', $patient->id)->get();
        $randomNumber = mt_rand(100, 999);
        $reference = 'PIR-' . $currentDateWithoutHyphens . '-' . $randomNumber;

        if ($patient->type == 'admitted_patient') {
            $innerContent = '
                Admission Details:
                - Admitted Date and Time: ' . $patient->admitted_date . ' ' . $patient->admitted_time . '
                - Discharged Date and Time: ' . $patient->discharged_date . ' ' . $patient->discharged_time . '
                - Doctor: Dr. ' . $doctor->first_name . ' ' . $doctor->last_name . '
            ';
        } else {
            $innerContent = '
            Appointment Details:
            - Appointment Date and Time: ' . $patient->admitted_date . ' ' . $patient->admitted_time . '
            - Doctor: Dr. ' . $doctor->first_name . ' ' . $doctor->last_name . '
        ';
        }

        $content =
            '           Patient Information Report
            ------------------------

            Report Reference Number: ' . $reference . '
            Report Date and Time: ' . $currentDate . ' ' . $currentTime . '

            Patient Information:
            - Name: ' . $patient->first_name . ' ' . $patient->last_name . '
            - Date of Birth: ' . $patient->birthdate . '
              Address:
                - Street: ' . $patient->street . '
                - Brgy: ' . $patient->brgy . '
                - City: ' . $patient->city . '
                - Province ' . $patient->province . '
              Contact Information: 
                - Email: ' . $patient->email . '
                - Phone: ' . $patient->phone . '
            ' . $innerContent . '

            Report Status: Finalized';

        Report::create([
            'reference_number' => $reference,
            'report_type' => 'Patient Information Report',
            'date' => $currentDate,
            'time' => $currentTime,
            'user_id' => $profile->id,
            'author_type' => $profile->role,
            'content' => $content,
        ]);

        $data = [
            'patient' => $patient,
            'currentTime' => $currentTime,
            'currentDate' => $currentDate,
            'profile' => $profile,
            'doctor' => $doctor,
            'diagnoses' => $diagnoses,
            'medications' => $medications,
            'reference' => $reference,
        ];

        $pdf = app('dompdf.wrapper')->loadView('admin.report.patient_report', $data);

        return $pdf->download('patient_report.pdf');
    }

-- Super Admin side view diagnose trend analytics --
    public function diagnoseTrendSearch(Request $request)
    {
        $request->validate([
            'diagnose' => 'required',
        ]);

        $profile = auth()->user();
        $notifications = Notification::where('type', $profile->role)->orderBy('date', 'desc')->get();
        $limitNotifications = $notifications->take(5);
        $count = $notifications->count();
        $currentYear = Carbon::now()->year;
        $currentDate = date('Y-m-d');
        $currentDateTime = Carbon::now();
        $currentDateTime->setTimezone('Asia/Manila');
        $currentTime = $currentDateTime->format('h:i A');
        $type = $request->input('type');
        $specificDiagnosis = $request->input('diagnose');

        $admittedDiagnoses = Diagnose::select('diagnose')
            ->selectRaw('COUNT(*) as total_occurrences')
            ->whereYear('date', $currentYear)
            ->groupBy('diagnose')
            ->get();

        // Merge the two collections and sort them by total_occurrences in descending order
        $mergedDiagnoses = $admittedDiagnoses;

        $rankedDiagnosis = $mergedDiagnoses->groupBy('diagnose')
            ->map(function ($group) {
                $firstItem = $group->first();
                return [
                    'diagnose' => $firstItem['diagnose'],
                    'total_occurrences' => $group->sum('total_occurrences'),
                ];
            })
            ->sortByDesc('total_occurrences')
            ->values();

        $diagnosisCount = $rankedDiagnosis->count();
        $limitDiagnosis = $rankedDiagnosis->take(5);

        if ($type == 'patient') {

            $diagnoseData = Diagnose::select('diagnose')
                ->distinct()
                ->pluck('diagnose')
                ->toArray();

            $patientYearData = DB::table('diagnoses')
                ->select(DB::raw('YEAR(date) as year'), DB::raw('COUNT(*) as count'))
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('YEAR(date)'))
                ->get();

            // Query the database to get the monthly trend data for the specific diagnosis and year for both admitted_date and date
            $patientMonthData = DB::table('diagnoses')
                ->select(DB::raw('MONTH(date) as month'), DB::raw('COUNT(*) as count'))
                ->whereYear('date', $currentYear)
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('MONTH(date)'))
                ->get();

            $title = 'Patient Diagnose Trend Analytics';

        } else if ($type == 'admitted') {

            $diagnoseData = Diagnose::select('diagnose')
                ->distinct()
                ->where('patient_type', 'admitted_patient')
                ->pluck('diagnose')
                ->toArray();

            $patientYearData = DB::table('diagnoses')
                ->select(DB::raw('YEAR(date) as year'), DB::raw('COUNT(*) as count'))
                ->where('patient_type', 'admitted_patient')
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('YEAR(date)'))
                ->get();

            // Query the database to get the monthly trend data for the specific diagnosis and year for both admitted_date and date
            $patientMonthData = DB::table('diagnoses')
                ->select(DB::raw('MONTH(date) as month'), DB::raw('COUNT(*) as count'))
                ->where('patient_type', 'admitted_patient')
                ->whereYear('date', $currentYear)
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('MONTH(date)'))
                ->get();
            
            $title = 'Admitted Patient Diagnose Trend Analytics';
            

        } else if ($type == 'outpatient') {

                $diagnoseData = Diagnose::select('diagnose')
                ->distinct()
                ->where('patient_type', 'outpatient')
                ->pluck('diagnose')
                ->toArray();

            $patientYearData = DB::table('diagnoses')
                ->select(DB::raw('YEAR(date) as year'), DB::raw('COUNT(*) as count'))
                ->where('patient_type', 'outpatient')
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('YEAR(date)'))
                ->get();

            // Query the database to get the monthly trend data for the specific diagnosis and year for both admitted_date and date
            $patientMonthData = DB::table('diagnoses')
                ->select(DB::raw('MONTH(date) as month'), DB::raw('COUNT(*) as count'))
                ->where('patient_type', 'outpatient')
                ->whereYear('date', $currentYear)
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('MONTH(date)'))
                ->get();

            $title = 'Outpatient Diagnose Trend Analytics';
            
        }

        // Create an array of years
        $years = [];
        $patientYearCounts = [];

        // Initialize counts for each year
        foreach (range(date('Y') - 1, date('Y')) as $year) {
            $years[] = $year;
            $patientYearCounts[] = 0;
        }

        // Fill in the data for the available years
        foreach ($patientYearData as $admitted) {
            $yearIndex = array_search($admitted->year, $years);
            if ($yearIndex !== false) {
                $patientYearCounts[$yearIndex] = $admitted->count;
            }
        }

        // Create an array with all months in the year
        $allMonths = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ];

        // Initialize the combined data with zero counts for all months
        $combinedData = [];

        foreach ($allMonths as $month) {
            $combinedData[$month] = [
                'admitted_count' => 0,
                'outpatient_count' => 0,
            ];
        }

        // Fill in the data for the available months
        foreach ($patientMonthData as $admitted) {
            $month = date('F', mktime(0, 0, 0, $admitted->month, 1));
            $combinedData[$month]['admitted_count'] = $admitted->count;
        }

        // Prepare the data for the chart
        $months = array_keys($combinedData);
        $patientMonthCounts = array_column($combinedData, 'admitted_count');

        return view('admin.analytics.diagnose_trend.diagnose_search', compact('profile', 'limitNotifications', 'count', 'diagnoseData', 'limitDiagnosis', 'years', 'patientYearCounts', 'months', 'patientMonthCounts', 'specificDiagnosis', 'rankedDiagnosis', 'currentTime', 'currentDate', 'type','title'));
    }

-- Super Admin side generate diagnose trend analytics report -- 
    public function diagnoseTrendReport(Request $request)
    {
        $year = $request->input('year');
        $currentYear = Carbon::now()->year; // Get current year
        $currentDate = date('Y-m-d');
        $currentDateTime = Carbon::now();
        $currentDateTime->setTimezone('Asia/Manila');
        $currentDateWithoutHyphens = str_replace('-', '', $currentDate);
        $currentTime = $currentDateTime->format('h:i A');
        $randomNumber = mt_rand(100, 999);

        // The specific diagnosis you want to analyze
        $specificDiagnosis = $request->input('diagnose');
        $type = $request->input('type');


        if ($type == 'patient') {

            $diagnoseData = Diagnose::select('diagnose')
                ->distinct()
                ->pluck('diagnose')
                ->toArray();

            $patientYearData = DB::table('diagnoses')
                ->select(DB::raw('YEAR(date) as year'), DB::raw('COUNT(*) as count'))
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('YEAR(date)'))
                ->get();

            // Query the database to get the monthly trend data for the specific diagnosis and year for both admitted_date and date
            $patientMonthData = DB::table('diagnoses')
                ->select(DB::raw('MONTH(date) as month'), DB::raw('COUNT(*) as count'))
                ->whereYear('date', $currentYear)
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('MONTH(date)'))
                ->get();
            
            $title = 'Patient Diagnose Trend Report';
            $reference = 'PDTAR-' . $currentDateWithoutHyphens . '-' . $randomNumber;

        } else if ($type == 'admitted') {

            $diagnoseData = Diagnose::select('diagnose')
                ->distinct()
                ->where('patient_type', 'admitted_patient')
                ->pluck('diagnose')
                ->toArray();

            $patientYearData = DB::table('diagnoses')
                ->select(DB::raw('YEAR(date) as year'), DB::raw('COUNT(*) as count'))
                ->where('patient_type', 'admitted_patient')
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('YEAR(date)'))
                ->get();

            // Query the database to get the monthly trend data for the specific diagnosis and year for both admitted_date and date
            $patientMonthData = DB::table('diagnoses')
                ->select(DB::raw('MONTH(date) as month'), DB::raw('COUNT(*) as count'))
                ->where('patient_type', 'admitted_patient')
                ->whereYear('date', $currentYear)
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('MONTH(date)'))
                ->get();
            
            $title = 'Admitted Patient Diagnose Trend Report';
            $reference = 'APDTAR-' . $currentDateWithoutHyphens . '-' . $randomNumber;

        } else if ($type == 'outpatient') {

                $diagnoseData = Diagnose::select('diagnose')
                ->distinct()
                ->where('patient_type', 'outpatient')
                ->pluck('diagnose')
                ->toArray();

            $patientYearData = DB::table('diagnoses')
                ->select(DB::raw('YEAR(date) as year'), DB::raw('COUNT(*) as count'))
                ->where('patient_type', 'outpatient')
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('YEAR(date)'))
                ->get();

            // Query the database to get the monthly trend data for the specific diagnosis and year for both admitted_date and date
            $patientMonthData = DB::table('diagnoses')
                ->select(DB::raw('MONTH(date) as month'), DB::raw('COUNT(*) as count'))
                ->where('patient_type', 'outpatient')
                ->whereYear('date', $currentYear)
                ->where('diagnose', $specificDiagnosis)
                ->groupBy(DB::raw('MONTH(date)'))
                ->get();  
            
            $title = 'Outpatient Diagnose Trend Report';
            $reference = 'ODTAR-' . $currentDateWithoutHyphens . '-' . $randomNumber;
        }

        // Create an array of years
        $years = [];
        $patientYearCounts = [];

        // Initialize counts for each year
        foreach (range(date('Y') - 1, date('Y')) as $year) {
            $years[] = $year;
            $patientYearCounts[] = 0;
        }

        // Fill in the data for the available years
        foreach ($patientYearData as $admitted) {
            $yearIndex = array_search($admitted->year, $years);
            if ($yearIndex !== false) {
                $patientYearCounts[$yearIndex] = $admitted->count;
            }
        }

        // Create an array with all months in the year
        $allMonths = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ];

        // Initialize the combined data with zero counts for all months
        $combinedData = [];

        foreach ($allMonths as $month) {
            $combinedData[$month] = [
                'admitted_count' => 0,
                'outpatient_count' => 0,
            ];
        }

        // Fill in the data for the available months
        foreach ($patientMonthData as $admitted) {
            $month = date('F', mktime(0, 0, 0, $admitted->month, 1));
            $combinedData[$month]['admitted_count'] = $admitted->count;
        }

        // Prepare the data for the chart
        $months = array_keys($combinedData);
        $patientMonthCounts = array_column($combinedData, 'admitted_count');

        return view('admin.report.diagnose_trend_report', compact('year', 'currentTime', 'currentDate', 'specificDiagnosis', 'years', 'patientYearCounts', 'months', 'patientMonthCounts','type','reference','title'));
    }

-- Super Admin side view graph --
    <script>
            // Get the data passed from the controller
            var years = @json($years);
            var patientCounts = @json($patientYearCounts);
            var type = @json($type);

            // Create a chart using Chart.js
            var ctx = document.getElementById('yearlyTrendChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'line', // Use a line chart for yearly trend
                data: {
                    labels: years,
                    datasets: [{
                        label: 'Patient',
                        data: patientCounts,
                        borderColor: 'rgba(54, 162, 235, 1)', // Blue
                        backgroundColor: 'rgba(54, 162, 235, 0.2)', // Lighter blue fill
                        borderWidth: 1,
                        fill: true, // To fill the area under the line
                        pointRadius: 5, // Adjust the size of data points on the line
                        pointBackgroundColor: 'rgba(54, 162, 235, 1)', // Blue data points
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            },
                        }
                    }
                }
            });

            // Get the data passed from the controller
            var months = @json($months);
            var patientCounts = @json($patientMonthCounts);

            // Create a chart using Chart.js
            var ctx = document.getElementById('monthlyTrendChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'line', // Change chart type to line
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Patient',
                        data: patientCounts,
                        borderColor: 'rgba(54, 162, 235, 1)', // Blue
                        backgroundColor: 'rgba(54, 162, 235, 0.2)', // Lighter blue fill
                        borderWidth: 1,
                        fill: true, // To fill the area under the line
                        pointRadius: 5, // Adjust the size of data points on the line
                        pointBackgroundColor: 'rgba(54, 162, 235, 1)', // Blue data points
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            },
                        }
                    }
                }
            });
    </script> 
